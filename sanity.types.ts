/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectname?: string;
  slug?: Slug;
  tagline?: string;
  services?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "expertises";
  }>;
  excerpt?: string;
  description?: string;
  location?: string;
  url?: string;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  Images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Promotion = {
  _id: string;
  _type: "promotion";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  label?: string;
  link?: string;
};

export type Expertises = {
  _id: string;
  _type: "expertises";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  slug?: Slug;
  tagline?: string;
  excerpt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  link?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Hero = {
  _id: string;
  _type: "hero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  slug?: Slug;
  tagline?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Form = {
  _id: string;
  _type: "form";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  label?: string;
  heading?: string;
  form?: "newsletter" | "register" | "contact";
};

export type Video = {
  _id: string;
  _type: "video";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  videoLabel?: string;
  url?: string;
};

export type TextWithIllustration = {
  _id: string;
  _type: "textWithIllustration";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  tagline?: string;
  excerpt?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SectionImageOverlay = {
  _id: string;
  _type: "sectionImageOverlay";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heading?: string;
  tagline?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  pageBuilder?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "hero";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "textWithIllustration";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "gallery";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "form";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "video";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "promotion";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "sectionImageOverlay";
  }>;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
}>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
};

export type Gallery = {
  _id: string;
  _type: "gallery";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: BlockContent;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Project | Promotion | Expertises | Hero | Form | Video | TextWithIllustration | SectionImageOverlay | Page | BlockContent | Category | Gallery | Post | Author | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/queries/expertise.ts
// Variable: ALL_EXPERTISES_QUERY
// Query: *[_type == "expertises"]{  _id,  heading,  slug,  tagline,  excerpt,  link,  image {    asset->{      _id,      url    },    alt  }}
export type ALL_EXPERTISES_QUERYResult = Array<{
  _id: string;
  heading: string | null;
  slug: Slug | null;
  tagline: string | null;
  excerpt: string | null;
  link: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
}>;
// Variable: EXPERTISE_BY_SLUG_QUERY
// Query: *[_type == "expertises" && slug.current == $slug][0]{  _id,  heading,  slug,  tagline,  excerpt,  body,  link,  image {    asset->{      _id,      url    },    alt  }}
export type EXPERTISE_BY_SLUG_QUERYResult = {
  _id: string;
  heading: string | null;
  slug: Slug | null;
  tagline: string | null;
  excerpt: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  link: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
} | null;
// Variable: FEATURED_EXPERTISES_QUERY
// Query: *[_type == "expertises"][0...3]{  _id,  heading,  slug,  tagline,  excerpt,  link,  image {    asset->{      _id,      url    },    alt  }}
export type FEATURED_EXPERTISES_QUERYResult = Array<{
  _id: string;
  heading: string | null;
  slug: Slug | null;
  tagline: string | null;
  excerpt: string | null;
  link: string | null;
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
}>;
// Variable: EXPERTISES_LIMIT_QUERY
// Query: *[_type == "expertises"][0...$limit]{  _id,  heading,  slug,  tagline,  excerpt,  link,  image}
export type EXPERTISES_LIMIT_QUERYResult = Array<{
  _id: string;
  heading: string | null;
  slug: Slug | null;
  tagline: string | null;
  excerpt: string | null;
  link: string | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
}>;

// Source: sanity/queries/gallery.ts
// Variable: ALL_GALLERIES_QUERY
// Query: *[_type == "gallery" && defined(slug.current)] {    _id,    title,    pageType,    slug,    "imageCount": count(images)  }
export type ALL_GALLERIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  pageType: null;
  slug: Slug | null;
  imageCount: number | null;
}>;
// Variable: GALLERIES_BY_PAGE_TYPE_QUERY
// Query: *[_type == "gallery" && pageType == $pageType] {    _id,    title,    pageType,    slug,    "imageCount": count(images)  }
export type GALLERIES_BY_PAGE_TYPE_QUERYResult = Array<{
  _id: string;
  title: string | null;
  pageType: null;
  slug: Slug | null;
  imageCount: number | null;
}>;
// Variable: GALLERY_BY_SLUG_QUERY
// Query: *[_type == "gallery" && slug.current == $slug][0] {    _id,    title,    pageType,    slug,    images[] {      _key,      asset->,      alt    }  }
export type GALLERY_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  pageType: null;
  slug: Slug | null;
  images: Array<{
    _key: string;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  }> | null;
} | null;
// Variable: GALLERY_SLUGS_QUERY
// Query: *[_type == "gallery" && defined(slug.current)] {    "slug": slug.current  }
export type GALLERY_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: FEATURED_GALLERIES_QUERY
// Query: *[_type == "gallery" && defined(slug.current)][0...3] {    _id,    title,    pageType,    slug,    "featuredImage": images[0] {      _key,      asset->,      alt    }  }
export type FEATURED_GALLERIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  pageType: null;
  slug: Slug | null;
  featuredImage: {
    _key: string;
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
}>;

// Source: sanity/queries/page.ts
// Variable: pageBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0]{    _id,    title,    slug,    // Basic content for all component types    pageBuilder[]{      _type,      _key,      _ref    },    // Expanded references for each component type    "hero": pageBuilder[_type == "hero"][0]{      ...*[_type == "hero" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "textWithIllustration": pageBuilder[_type == "textWithIllustration"][0]{      ...*[_type == "textWithIllustration" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "gallery": pageBuilder[_type == "galleryReference"][0]{      ...*[_type == "gallery" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "form": pageBuilder[_type == "form"][0]{      ...*[_type == "form" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "video": pageBuilder[_type == "videoReference"][0]{      ...*[_type == "video" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "promotion": pageBuilder[_type == "callToAction"][0]{      ...*[_type == "promotion" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "sectionImageOverlay": pageBuilder[_type == "sectionImageOverlay"][0]{      ...*[_type == "sectionImageOverlay" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    }  }
export type PageBySlugQueryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  pageBuilder: Array<{
    _type: "reference";
    _key: string;
    _ref: string;
  }> | null;
  hero: null;
  textWithIllustration: null;
  gallery: null;
  form: null;
  video: null;
  promotion: null;
  sectionImageOverlay: null;
} | null;
// Variable: pageBySlugQueryC
// Query: *[_type == "page" && slug.current == $slug][0]{    _id,    title,    slug,    // Basic content for all component types    pageBuilder[]{      _type,      _key,      _ref    },    // Expanded references for each component type    "hero": pageBuilder[_type == "hero"][0]{      ...*[_type == "hero" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "textWithIllustration": pageBuilder[_type == "textWithIllustration"][0]{      ...*[_type == "textWithIllustration" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "gallery": pageBuilder[_type == "galleryReference"][0]{      ...*[_type == "gallery" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "form": pageBuilder[_type == "form"][0]{      ...*[_type == "form" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "video": pageBuilder[_type == "videoReference"][0]{      ...*[_type == "video" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "promotion": pageBuilder[_type == "callToAction"][0]{      ...*[_type == "promotion" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    },    "sectionImageOverlay": pageBuilder[_type == "sectionImageOverlay"][0]{      ...*[_type == "sectionImageOverlay" && _id == ^._ref][0]{        _id,        _type,        _key,        ...      }    }  }
export type PageBySlugQueryCResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  pageBuilder: Array<{
    _type: "reference";
    _key: string;
    _ref: string;
  }> | null;
  hero: null;
  textWithIllustration: null;
  gallery: null;
  form: null;
  video: null;
  promotion: null;
  sectionImageOverlay: null;
} | null;
// Variable: allPagesQuery
// Query: *[_type == "page"]{    _id,    title,    slug  }
export type AllPagesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: allPagePathsQuery
// Query: *[_type == "page" && defined(slug.current)][]{    "params": { "slug": slug.current }  }
export type AllPagePathsQueryResult = Array<{
  params: {
    slug: string | null;
  };
}>;

// Source: sanity/queries/posts.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)] | order(publishedAt desc) {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: POSTS_SLUGS_QUERY
// Query: *[_type == "post" && defined(slug.current)] {  "slug": slug.current}
export type POSTS_SLUGS_QUERYResult = Array<{
  slug: string | null;
}>;
// Variable: POST_BY_SLUG_QUERY
// Query: *[_type == "post" && slug.current == $slug][0] {  _id,  title,  body,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type POST_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  body: BlockContent | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: POSTS_BY_CATEGORY_QUERY
// Query: *[_type == "post" && $categoryId in categories[]._ref] | order(publishedAt desc) {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type POSTS_BY_CATEGORY_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: FEATURED_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)] | order(publishedAt desc)[0...3] {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type FEATURED_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: PAGINATED_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)] | order(publishedAt desc)[$start...$end] {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type PAGINATED_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: SEARCH_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current) && title match $searchTerm] | order(publishedAt desc) {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type SEARCH_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: RELATED_POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current) && _id != $postId && count((categories[]->_id)[@ in $categoryIds]) > 0] | order(publishedAt desc)[0...4] {  _id,  title,  slug,  mainImage,  publishedAt,  "categories": categories[]->{     _id,    title,    slug  },  author->{     name,    image  }}
export type RELATED_POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: null;
  }> | null;
  author: {
    name: string | null;
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;

// Source: sanity/queries/project.ts
// Variable: ALL_PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug.current)]{  _id,   projectname,   slug,  tagline,  services[]->{    _id,    name  },   excerpt,  location,  mainImage,  Images[]{    ...,    asset->{      url    }  }}
export type ALL_PROJECTS_QUERYResult = Array<{
  _id: string;
  projectname: string | null;
  slug: Slug | null;
  tagline: string | null;
  services: Array<{
    _id: string;
    name: null;
  }> | null;
  excerpt: string | null;
  location: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  Images: Array<{
    asset: {
      url: string | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
}>;
// Variable: PROJECT_BY_SLUG_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{  _id,  projectname,  slug,  tagline,  services[]->{    _id,    name  },  excerpt,  description,  location,  url,  mainImage,  Images[]{    ...,    asset->{      url    }  }}
export type PROJECT_BY_SLUG_QUERYResult = {
  _id: string;
  projectname: string | null;
  slug: Slug | null;
  tagline: string | null;
  services: Array<{
    _id: string;
    name: null;
  }> | null;
  excerpt: string | null;
  description: string | null;
  location: string | null;
  url: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  Images: Array<{
    asset: {
      url: string | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
} | null;
// Variable: FEATURED_PROJECTS_QUERY
// Query: *[_type == "project" && defined(slug.current)][0...3]{  _id,  projectname,  slug,  tagline,  excerpt,  mainImage}
export type FEATURED_PROJECTS_QUERYResult = Array<{
  _id: string;
  projectname: string | null;
  slug: Slug | null;
  tagline: string | null;
  excerpt: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"expertises\"]{\n  _id,\n  heading,\n  slug,\n  tagline,\n  excerpt,\n  link,\n  image {\n    asset->{\n      _id,\n      url\n    },\n    alt\n  }\n}": ALL_EXPERTISES_QUERYResult;
    "*[_type == \"expertises\" && slug.current == $slug][0]{\n  _id,\n  heading,\n  slug,\n  tagline,\n  excerpt,\n  body,\n  link,\n  image {\n    asset->{\n      _id,\n      url\n    },\n    alt\n  }\n}": EXPERTISE_BY_SLUG_QUERYResult;
    "*[_type == \"expertises\"][0...3]{\n  _id,\n  heading,\n  slug,\n  tagline,\n  excerpt,\n  link,\n  image {\n    asset->{\n      _id,\n      url\n    },\n    alt\n  }\n}": FEATURED_EXPERTISES_QUERYResult;
    "*[_type == \"expertises\"][0...$limit]{\n  _id,\n  heading,\n  slug,\n  tagline,\n  excerpt,\n  link,\n  image\n}": EXPERTISES_LIMIT_QUERYResult;
    "*[_type == \"gallery\" && defined(slug.current)] {\n    _id,\n    title,\n    pageType,\n    slug,\n    \"imageCount\": count(images)\n  }": ALL_GALLERIES_QUERYResult;
    "*[_type == \"gallery\" && pageType == $pageType] {\n    _id,\n    title,\n    pageType,\n    slug,\n    \"imageCount\": count(images)\n  }": GALLERIES_BY_PAGE_TYPE_QUERYResult;
    "*[_type == \"gallery\" && slug.current == $slug][0] {\n    _id,\n    title,\n    pageType,\n    slug,\n    images[] {\n      _key,\n      asset->,\n      alt\n    }\n  }": GALLERY_BY_SLUG_QUERYResult;
    "*[_type == \"gallery\" && defined(slug.current)] {\n    \"slug\": slug.current\n  }": GALLERY_SLUGS_QUERYResult;
    "*[_type == \"gallery\" && defined(slug.current)][0...3] {\n    _id,\n    title,\n    pageType,\n    slug,\n    \"featuredImage\": images[0] {\n      _key,\n      asset->,\n      alt\n    }\n  }": FEATURED_GALLERIES_QUERYResult;
    "*[_type == \"page\" && slug.current == $slug][0]{\n    _id,\n    title,\n    slug,\n    // Basic content for all component types\n    pageBuilder[]{\n      _type,\n      _key,\n      _ref\n    },\n    // Expanded references for each component type\n    \"hero\": pageBuilder[_type == \"hero\"][0]{\n      ...*[_type == \"hero\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"textWithIllustration\": pageBuilder[_type == \"textWithIllustration\"][0]{\n      ...*[_type == \"textWithIllustration\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"gallery\": pageBuilder[_type == \"galleryReference\"][0]{\n      ...*[_type == \"gallery\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"form\": pageBuilder[_type == \"form\"][0]{\n      ...*[_type == \"form\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"video\": pageBuilder[_type == \"videoReference\"][0]{\n      ...*[_type == \"video\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"promotion\": pageBuilder[_type == \"callToAction\"][0]{\n      ...*[_type == \"promotion\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    },\n    \"sectionImageOverlay\": pageBuilder[_type == \"sectionImageOverlay\"][0]{\n      ...*[_type == \"sectionImageOverlay\" && _id == ^._ref][0]{\n        _id,\n        _type,\n        _key,\n        ...\n      }\n    }\n  }": PageBySlugQueryResult | PageBySlugQueryCResult;
    "*[_type == \"page\"]{\n    _id,\n    title,\n    slug\n  }": AllPagesQueryResult;
    "*[_type == \"page\" && defined(slug.current)][]{\n    \"params\": { \"slug\": slug.current }\n  }": AllPagePathsQueryResult;
    "*[_type == \"post\" && defined(slug.current)] | order(publishedAt desc) {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)] {\n  \"slug\": slug.current\n}": POSTS_SLUGS_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0] {\n  _id,\n  title,\n  body,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": POST_BY_SLUG_QUERYResult;
    "*[_type == \"post\" && $categoryId in categories[]._ref] | order(publishedAt desc) {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": POSTS_BY_CATEGORY_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)] | order(publishedAt desc)[0...3] {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": FEATURED_POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current)] | order(publishedAt desc)[$start...$end] {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": PAGINATED_POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && title match $searchTerm] | order(publishedAt desc) {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": SEARCH_POSTS_QUERYResult;
    "*[_type == \"post\" && defined(slug.current) && _id != $postId && count((categories[]->_id)[@ in $categoryIds]) > 0] | order(publishedAt desc)[0...4] {\n  _id,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"categories\": categories[]->{ \n    _id,\n    title,\n    slug\n  },\n  author->{ \n    name,\n    image\n  }\n}": RELATED_POSTS_QUERYResult;
    "*[_type == \"project\" && defined(slug.current)]{\n  _id, \n  projectname, \n  slug,\n  tagline,\n  services[]->{\n    _id,\n    name\n  },\n \n  excerpt,\n  location,\n  mainImage,\n  Images[]{\n    ...,\n    asset->{\n      url\n    }\n  }\n}": ALL_PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n  _id,\n  projectname,\n  slug,\n  tagline,\n  services[]->{\n    _id,\n    name\n  },\n  excerpt,\n  description,\n  location,\n  url,\n  mainImage,\n  Images[]{\n    ...,\n    asset->{\n      url\n    }\n  }\n}": PROJECT_BY_SLUG_QUERYResult;
    "*[_type == \"project\" && defined(slug.current)][0...3]{\n  _id,\n  projectname,\n  slug,\n  tagline,\n  excerpt,\n  mainImage\n}": FEATURED_PROJECTS_QUERYResult;
  }
}
